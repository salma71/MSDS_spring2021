knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(xts)
library(DMwR2)
library(quantmod)
library(TTR)
library(performanceEstimation)
library(nnet)
library(e1071)
library(kernlab)
library(earth)
library(randomForest)
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
library(readr)
dataset <- read_csv('https://raw.githubusercontent.com/salma71/Data_621/master/Project_Proposal/stocks_combined.csv')
tickers <- read_csv('https://raw.githubusercontent.com/salma71/Data_621/master/Project_Proposal/tickers.csv')
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean) # function HLC() extracts the High, Low, and Close quotes
v[1] <- Cl(quotes)[1]
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
for(x in 1:n.days) r[,x] <- Next(Delt(v,k=x),x)
x <- apply(r,1,function(x)
sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else x
}
ts <- xts(aapl[,-1], order.by = as.Date(anytime::anydate(aapl$date)))
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN=avgPrice, col=1, legend='AvgPrice')
addT.ind <- newTA(FUN=T.ind, col='red', legend='tgtRet')
candleChart(last(ts,'3 months'), theme='white', TA=c(addAvgPrice(on=1), addT.ind()))
last(ts)
last(ts, '3 months')
last(ts, '3 weeks')
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN=avgPrice, col=1, legend='AvgPrice')
addT.ind <- newTA(FUN=T.ind, col='red', legend='tgtRet')
candleChart(xts::last(ts,'3 months'), theme='white', TA=c(addAvgPrice(on=1), addT.ind()))
xts::last(ts, '3 months')
str(xts)
str(ts)
storage.mode(ts) <- "numeric"
ts <- na.locf(ts)
ts
str(ts)
library(readr)
dataset <- read_csv('https://raw.githubusercontent.com/salma71/Data_621/master/Project_Proposal/stocks_combined.csv')
tickers <- read_csv('https://raw.githubusercontent.com/salma71/Data_621/master/Project_Proposal/tickers.csv')
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
str(aapl)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.xts()
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date(anytime:anydate(date)) %>%
dplyr::select(-date) %>%
as.numeric() %>%
as.xts(order.by = date)
ataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date(anytime:anydate(date))
dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date(anytime:anydate(date))
temp = dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
temp$date = as.Date(anytime::anydate(temp$date))
head(temp)
temp %>% dplyr::select(-date)
temp %>% as.xts(order.by = date)
temp
s = as.xts(temp)
s = as.xts(temp[,-1], order.by = temp$date)
s
s %>% dplyr::select(-date, -ticker) %>% as.numeric()
dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date.POSIXct()
temp = dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
t = as.Date.ts(temp)
t = as.Date.POSIXct(temp)
t = as.Date.POSIXct(temp$date)
t = as.Date.ts(temp$date)
t
t = temp
t$date = as.Date.POSIXct(t$date)
t$date = as.Date.ts(t$date)
head(t)
t$date = as.Date.POSIXct(t$date)
head(t)
t = ttemp
t = temp
t$date = as.Date(t$date)
t$date = as.Date.character(t$date)
t$date = as.Date.numeric()
t$date = as.Date.numeric(t$date)
t$date = anytime::anydate(t$date)
gead(t)
head(t)
as.xts(t)
as.xts([,-1])
as.xts(t[,-1])
as.xts(t[,1])
str(t)
tt = xts::xts(order.by = t$date)
head(tt)
tt = xts::xts(t, order.by = t$date)
head(tt)
tt = xts::xts(t[,-1], order.by = t$date)
head(tt)
last(tt, '3 months')
xts::last(tt, '3 months')
is.xts(tt)
candleChart(xts::last(ts,'3 months'))
candleChart(xts::last(tt,'3 months'))
lty <- c("dotted", "solid")
plot(tt$close, lty = lty, legend.loc = "left")
plot(tt, lty = lty, legend.loc = "left")
plot(as.numeric(tt$close), lty = lty, legend.loc = "left")
avgPrice <- function(p) apply(HLC(as.numeric(p)), 1, mean)
addAvgPrice <- newTA(FUN=avgPrice, col=1, legend='AvgPrice')
addT.ind <- newTA(FUN=T.ind, col='red', legend='tgtRet')
candleChart(xts::last(ts,'3 months'), theme='white', TA=c(addAvgPrice(on=1), addT.ind()))
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
anytime:anydate(date) %>%
as.xts(order.by = date)
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
anytime:anydate(date) %>%
as.xts(order.by = date)
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
anytime:anydate(date)
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
aapl$date <- anytime::anydate(aapl$date)
head(aapl)
# convert to xts time series
aapl_xts <- xts::xts(aapl[, -1], order.by = aapl$date)
head(aapl_xts)
avgPrice <- function(p) apply(HLC(as.numeric(p)), 1, mean)
addAvgPrice <- newTA(FUN=avgPrice, col=1, legend='AvgPrice')
addT.ind <- newTA(FUN=T.ind, col='red', legend='tgtRet')
candleChart(xts::last(aapl_xts,'3 months'), theme='white', TA=c(addAvgPrice(on=1), addT.ind()))
# convert to xts time series
aapl_xts <- xts::xts(aapl[, -1], order.by = aapl$date)
aapl_xts$open <- as.character.numeric_version(aapl_xts$open)
head(aapl_xts)
is.xts(aapl_xts)
library(corrplot)
library(RColorBrewer)
M <-cor(aapl)
library(corrplot)
library(RColorBrewer)
M <-cor(aapl[, -1])
library(corrplot)
library(RColorBrewer)
M <-cor(aapl[, c(-1, -2)])
corrplot(M, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
library(corrplot)
library(RColorBrewer)
M <-cor(dataset[, c(-1, -2)])
library(corrplot)
library(RColorBrewer)
M <-cor(dataset[, c(-1, -2, -12)])
corrplot(M, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
setwd("~/Desktop/MSDS_spring2021/data_624")
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>",
fig.width = 6,
fig.height = 3
)
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(seasonal)
install.packages("seasonal")
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>",
fig.width = 6,
fig.height = 3
)
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(seasonal)
library(gridExtra)
theme_set(theme_classic())
autoplot(plastics)
autoplot(plastics)
ggseasonplot(plastics)
plastics %>%
decompose(type = 'multiplicative') %>%
autoplot()
plastics %>%
decompose(type = 'multiplicative') -> fit
autoplot(plastics, series = 'Data') +
autolayer(seasadj(fit), series = 'Seasonally Adjusted')
oplastics <- plastics
oplastics[28] <- oplastics[28] + 500
oplastics %>%
decompose(type="multiplicative") -> ofit
autoplot(oplastics, series = "Data") +
autolayer(trendcycle(ofit), series = "Trend") +
autolayer(seasadj(ofit), series = "Seasonally Adjusted")
oplastics %>%
decompose(type="multiplicative") %>%
autoplot()
oplastics <- plastics
oplastics[57] <- oplastics[57] + 500
oplastics %>%
decompose(type="multiplicative") -> ofit
autoplot(oplastics, series = "Data") +
autolayer(trendcycle(ofit), series = "Trend") +
autolayer(seasadj(ofit), series = "Seasonally Adjusted")
oplastics %>%
decompose(type="multiplicative") %>%
autoplot()
retaildata <- readxl::read_excel("retail.xlsx", skip = 1)
myts <- ts(retaildata[,"A3349398A"], frequency=12, start=c(1982,4))
autoplot(myts)
myts %>% seas(x11="") -> fit
autoplot(fit) +
ggtitle("X11 decomposition of Retail data")
plastics %>%
decompose(type = 'multiplicative') %>%
autoplot()
oplastics %>%
decompose(type="multiplicative") %>%
autoplot()
oplastics %>%
decompose(type="multiplicative") %>%
autoplot()
myts %>%
seas(x11="") -> fit
autoplot(fit) +
ggtitle("X11 decomposition of Retail data")
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>",
fig.width = 8,
fig.height = 3
)
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(seasonal)
library(gridExtra)
theme_set(theme_classic())
autoplot(plastics)
ggseasonplot(plastics)
plastics %>%
decompose(type = 'multiplicative') %>%
autoplot()
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>",
fig.width = 7,
fig.height = 3
)
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(seasonal)
library(gridExtra)
theme_set(theme_classic())
autoplot(plastics)
ggseasonplot(plastics)
plastics %>%
decompose(type = 'multiplicative') %>%
autoplot()
plastics %>%
decompose(type = 'multiplicative') %>%
autoplot()
plastics %>%
decompose(type = 'multiplicative') %>%
autoplot()
oplastics %>%
decompose(type="multiplicative") %>%
autoplot()
oplastics %>%
decompose(type="multiplicative") %>%
autoplot()
myts %>%
seas(x11="") -> fit
autoplot(fit) +
ggtitle("X11 decomposition of Retail data")
oplastics <- plastics
oplastics[28] <- oplastics[28] + 500
oplastics %>%
decompose(type="multiplicative") -> ofit
autoplot(oplastics, series = "Data") +
autolayer(trendcycle(ofit), series = "Trend") +
autolayer(seasadj(ofit), series = "Seasonally Adjusted")
oplastics <- plastics
oplastics[57] <- oplastics[57] + 500
oplastics %>%
decompose(type="multiplicative") -> ofit
autoplot(oplastics, series = "Data") +
autolayer(trendcycle(ofit), series = "Trend") +
autolayer(seasadj(ofit), series = "Seasonally Adjusted")
autoplot(plastics)
ggseasonplot(plastics) +
labs(title = 'Monthly salesof Product "A"', x = 'Time', y = 'Sales')
autoplot(plastics)
ggseasonplot(plastics) +
labs(title = 'Monthly sales of Product "A"', x = 'Time', y = 'Sales')
autoplot(plastics)
ggseasonplot(plastics) +
labs(title = 'Monthly sales of Product "A"', x = 'Month', y = 'Sales')
autoplot(plastics)
ggseasonplot(plastics) +
labs(title = 'Monthly sales of Product "A"', x = 'Month', y = 'Sales')
ggsubseriesplot(plastics) +
labs(title='Subseries Plot',
y="Sales", x="Month")
autoplot(plastics)
ggseasonplot(plastics) +
labs(title = 'Monthly sales of Product "A"', x = 'Month', y = 'Sales')
ggsubseriesplot(plastics) +
labs(title='Subseries Plot', x="Month", y="Sales")
