ts <- na.locf(ts)
ts
str(ts)
library(readr)
dataset <- read_csv('https://raw.githubusercontent.com/salma71/Data_621/master/Project_Proposal/stocks_combined.csv')
tickers <- read_csv('https://raw.githubusercontent.com/salma71/Data_621/master/Project_Proposal/tickers.csv')
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
str(aapl)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.xts()
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date(anytime:anydate(date)) %>%
dplyr::select(-date) %>%
as.numeric() %>%
as.xts(order.by = date)
ataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date(anytime:anydate(date))
dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date(anytime:anydate(date))
temp = dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
temp$date = as.Date(anytime::anydate(temp$date))
head(temp)
temp %>% dplyr::select(-date)
temp %>% as.xts(order.by = date)
temp
s = as.xts(temp)
s = as.xts(temp[,-1], order.by = temp$date)
s
s %>% dplyr::select(-date, -ticker) %>% as.numeric()
dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
as.Date.POSIXct()
temp = dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
t = as.Date.ts(temp)
t = as.Date.POSIXct(temp)
t = as.Date.POSIXct(temp$date)
t = as.Date.ts(temp$date)
t
t = temp
t$date = as.Date.POSIXct(t$date)
t$date = as.Date.ts(t$date)
head(t)
t$date = as.Date.POSIXct(t$date)
head(t)
t = ttemp
t = temp
t$date = as.Date(t$date)
t$date = as.Date.character(t$date)
t$date = as.Date.numeric()
t$date = as.Date.numeric(t$date)
t$date = anytime::anydate(t$date)
gead(t)
head(t)
as.xts(t)
as.xts([,-1])
as.xts(t[,-1])
as.xts(t[,1])
str(t)
tt = xts::xts(order.by = t$date)
head(tt)
tt = xts::xts(t, order.by = t$date)
head(tt)
tt = xts::xts(t[,-1], order.by = t$date)
head(tt)
last(tt, '3 months')
xts::last(tt, '3 months')
is.xts(tt)
candleChart(xts::last(ts,'3 months'))
candleChart(xts::last(tt,'3 months'))
lty <- c("dotted", "solid")
plot(tt$close, lty = lty, legend.loc = "left")
plot(tt, lty = lty, legend.loc = "left")
plot(as.numeric(tt$close), lty = lty, legend.loc = "left")
avgPrice <- function(p) apply(HLC(as.numeric(p)), 1, mean)
addAvgPrice <- newTA(FUN=avgPrice, col=1, legend='AvgPrice')
addT.ind <- newTA(FUN=T.ind, col='red', legend='tgtRet')
candleChart(xts::last(ts,'3 months'), theme='white', TA=c(addAvgPrice(on=1), addT.ind()))
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
anytime:anydate(date) %>%
as.xts(order.by = date)
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
anytime:anydate(date) %>%
as.xts(order.by = date)
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL") %>%
anytime:anydate(date)
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
library(anytime)
aapl <- dataset %>%
dplyr::select(date, ticker, open, close, volume) %>%
dplyr::filter(ticker == "AAPL")
aapl$date <- anytime::anydate(aapl$date)
head(aapl)
# convert to xts time series
aapl_xts <- xts::xts(aapl[, -1], order.by = aapl$date)
head(aapl_xts)
avgPrice <- function(p) apply(HLC(as.numeric(p)), 1, mean)
addAvgPrice <- newTA(FUN=avgPrice, col=1, legend='AvgPrice')
addT.ind <- newTA(FUN=T.ind, col='red', legend='tgtRet')
candleChart(xts::last(aapl_xts,'3 months'), theme='white', TA=c(addAvgPrice(on=1), addT.ind()))
# convert to xts time series
aapl_xts <- xts::xts(aapl[, -1], order.by = aapl$date)
aapl_xts$open <- as.character.numeric_version(aapl_xts$open)
head(aapl_xts)
is.xts(aapl_xts)
library(corrplot)
library(RColorBrewer)
M <-cor(aapl)
library(corrplot)
library(RColorBrewer)
M <-cor(aapl[, -1])
library(corrplot)
library(RColorBrewer)
M <-cor(aapl[, c(-1, -2)])
corrplot(M, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
library(corrplot)
library(RColorBrewer)
M <-cor(dataset[, c(-1, -2)])
library(corrplot)
library(RColorBrewer)
M <-cor(dataset[, c(-1, -2, -12)])
corrplot(M, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
setwd("~/Desktop/MSDS_spring2021/data_624")
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>"
)
library(fpp2)
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>"
)
library(fpp2)
library(forecast)
box_usnetelec <- BoxCox.lambda(usnetelec)
autoplot(BoxCox(usnetelec, box_usnetelec))
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)), ', After Transformation'))
grid.arrange(plot1, plot2, ncol=2)
}
series_df <- c(usnetelec, usgdp, mcopper, enplanements)
for (df in series_df) {
boxcox_plot(df)
}
series_df <- c(usnetelec, usgdp, mcopper, enplanements)
series_df
# for (df in series_df) {
#   boxcox_plot(df)
# }
boxcox_plot(usnetelec)
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>"
)
library(fpp2)
library(forecast)
library(ggplot2)
boxcox_plot(usnetelec)
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)), ', After Transformation'))
ggplot2::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec)
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>"
)
library(fpp2)
library(forecast)
library(ggplot2)
library(gridExtra)
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)), ', After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec)
boxcox_plot(usgdp)
boxcox_plot(mcopper)
boxcox_plot(enplanements)
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste('deparse(substitute(df))', ', After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec)
boxcox_plot(usgdp)
boxcox_plot(mcopper)
boxcox_plot(enplanements)
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)), ', After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec)
boxcox_plot(usgdp)
boxcox_plot(mcopper)
boxcox_plot(enplanements)
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)) - ', After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec)
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df))', After Transformation'))
boxcox_plot <- function(df){
box_df <- BoxCox.lambda(df)
print(paste0('The lambda for this time series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)),' - After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec)
boxcox_plot(usgdp)
boxcox_plot(mcopper)
boxcox_plot(enplanements)
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>"
)
library(fpp2)
library(forecast)
library(stringr)
library(ggplot2)
library(gridExtra)
boxcox_plot <- function(df, name){
box_df <- BoxCox.lambda(df)
str_interp('The lambda for the {name} is $[.2f]{box_df}')
# print(paste0('The lambda for {this time} series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)),' - After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec)
boxcox_plot(usgdp)
boxcox_plot(mcopper)
boxcox_plot(enplanements)
boxcox_plot <- function(df, name){
box_df <- BoxCox.lambda(df)
str_interp('The lambda for the {name} is $[.2f]{box_df}')
# print(paste0('The lambda for {this time} series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)),' - After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec, 'usnetelec')
boxcox_plot(usgdp, 'usgdp')
boxcox_plot(mcopper, 'mcopper')
boxcox_plot(enplanements, 'enplanements')
boxcox_plot <- function(df, name){
box_df <- BoxCox.lambda(df)
print(str_interp('The lambda for the {name} is $[.2f]{box_df}'))
# print(paste0('The lambda for {this time} series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)),' - After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec, 'usnetelec')
boxcox_plot(usgdp, 'usgdp')
boxcox_plot(mcopper, 'mcopper')
boxcox_plot(enplanements, 'enplanements')
boxcox_plot <- function(df, name){
box_df <- BoxCox.lambda(df)
print(str_interp('The lambda for the ${name} is $[.2f]{box_df}'))
# print(paste0('The lambda for {this time} series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)),' - After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec, 'usnetelec')
boxcox_plot(usgdp, 'usgdp')
boxcox_plot(mcopper, 'mcopper')
boxcox_plot(enplanements, 'enplanements')
boxcox_plot <- function(df, name){
box_df <- BoxCox.lambda(df)
print(str_interp('The lambda for the ${name} is $[.4f]{box_df}'))
# print(paste0('The lambda for {this time} series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)),' - After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec, 'usnetelec')
boxcox_plot(usgdp, 'usgdp')
boxcox_plot(mcopper, 'mcopper')
boxcox_plot(enplanements, 'enplanements')
boxcox_plot(cangas, 'cangas')
retaildata <- readxl::read_excel("retail.xlsx", skip=1)
myts <- ts(retaildata[,"A3349873A"], frequency=12, start=c(1982,4))
boxcox_plot(myts, 'Retail data')
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>"
)
theme_set(theme_classic())
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(gridExtra)
box_usnetelec <- BoxCox.lambda(usnetelec)
autoplot(BoxCox(usnetelec, box_usnetelec))
boxcox_plot <- function(df, name){
box_df <- BoxCox.lambda(df)
print(str_interp('The lambda for the ${name} is $[.4f]{box_df}'))
# print(paste0('The lambda for {this time} series is: ', box_df))
plot1 <- autoplot(df) +
ggtitle(deparse(substitute(df)))
plot2 <- autoplot(BoxCox(df, box_df)) +
ggtitle(paste(deparse(substitute(df)),' - After Transformation'))
gridExtra::grid.arrange(plot1, plot2, ncol=2)
}
boxcox_plot(usnetelec, 'usnetelec')
boxcox_plot(usgdp, 'usgdp')
boxcox_plot(mcopper, 'mcopper')
boxcox_plot(enplanements, 'enplanements')
boxcox_plot(cangas, 'cangas')
retaildata <- readxl::read_excel("retail.xlsx", skip=1)
myts <- ts(retaildata[,"A3349873A"], frequency=12, start=c(1982,4))
boxcox_plot(myts, 'Retail data')
myts.train <- window(myts, end=c(2010,12))
myts.test <- window(myts, start=2011)
autoplot(myts) +
autolayer(myts.train, series="Training") +
autolayer(myts.test, series="Test")
accuracy(fc,myts.test)
fc <- snaive(myts.train)
accuracy(fc,myts.test)
checkresiduals(fc)
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>",
fig.width = 15,
fig.height = 7
)
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(gridExtra)
theme_set(theme_classic())
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>",
fig.width = 6,
fig.height = 3
)
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(gridExtra)
theme_set(theme_classic())
fc <- snaive(myts.train)
fc
(fc <- snaive(myts.train))
fc <- snaive(myts.train)
knitr::kable(head(fc, 10))
(fc <- snaive(myts.train))
train <- subset.ts(retaildata, end = 1000)
train <- subset.ts(retaildata, end = 1000)
train <- forecast::subset.ts(retaildata, end = 1000)
?subset.ts()
knitr::opts_chunk$set(
collapse = TRUE,
echo = FALSE,
comment = "#>",
fig.width = 6,
fig.height = 3
)
library(fpp2)
library(forecast)
library(readr)
library(stringr)
library(ggplot2)
library(gridExtra)
theme_set(theme_classic())
train <- subset.ts(retaildata, end = 1000)
train <- subset(retaildata, end = 1000)
test <- subset(retaildata, start = 1001, end = length(retaildata))
naive_fc <- naive(train, h = 108)
accuracy(naive_fc, test)
# create training data
train2 <- window(retaildata, end = c(1985, 4))
# create training data
train2 <- window(myts, end=c(2010,12))
# create specific test data of interest
test <- window(myts, start=2011)
# Compute snaive forecasts and save to snaive_fc
snaive_fc <- snaive(train2, h = length(test))
# Compute mean forecasts and save to mean_fc
mean_fc <- meanf(train2, h = length(test))
# Use accuracy() to compute forecast accuracy
accuracy(snaive_fc, test)
# create training data
train2 <- window(myts, end=c(2010,12))
# create specific test data of interest
test <- window(myts, start=2011)
# Compute snaive forecasts and save to snaive_fc
snaive_fc <- snaive(train2, h = length(test))
# Compute mean forecasts and save to mean_fc
mean_fc <- meanf(train2, h = length(test))
# Use accuracy() to compute forecast accuracy
accuracy(snaive_fc, test)
accuracy(mean_fc, test)
# create training data
train2 <- window(myts, end=c(2010,12))
# create specific test data of interest
test <- window(myts, start=2011)
# Compute snaive forecasts and save to snaive_fc
snaive_fc <- snaive(train2, h = length(test))
# Compute mean forecasts and save to mean_fc
mean_fc <- meanf(train2, h = length(test))
# Use accuracy() to compute forecast accuracy
accuracy(snaive_fc, test)
print('-----------')
print('Accuraccy using mean_dc')
accuracy(mean_fc, test)
# create training data
train2 <- window(myts, end=c(2010,12))
# create specific test data of interest
test <- window(myts, start=2011)
# Compute snaive forecasts and save to snaive_fc
snaive_fc <- snaive(train2, h = length(test))
# Compute mean forecasts and save to mean_fc
mean_fc <- meanf(train2, h = length(test))
# Use accuracy() to compute forecast accuracy
accuracy(snaive_fc, test)
print('-----------')
print('Accuraccy using mean_fc')
accuracy(mean_fc, test)
