temp_test <- test_df_imputed %>%
filter(Brand.Code == brand_code) %>%
select(-Brand.Code)
temp_predictions <- predict(temp_rf, temp_test)
print(postResample(pred = temp_predictions, obs = temp_test$PH))
}
#converting datasets to matrices
#options(na.action="na.pass")
training2 <- train_df_imputed %>% drop_na(Brand.Code)
testing2 <- test_df_imputed %>% drop_na(Brand.Code)
trainingmx <- model.matrix(~.+0,data=training2[,names(training2) != c("PH")])
testingmx <- model.matrix(~.+0,data=testing2[,names(testing2) != c("PH")])
trainingdmx <- xgb.DMatrix(data = trainingmx, label=training2$PH)
testingdmx <- xgb.DMatrix(data = testingmx, label=testing2$PH)
#default parameters
params <- list(booster = "gbtree", objective = "reg:linear", eta=0.3, gamma=0, max_depth=6, min_child_weight=1, subsample=1, colsample_bytree=1)
#determine the best nround parameter (It controls the maximum number of iterations. For classification, it is similar to the number of trees to grow.)
xgbcv <- xgb.cv( params = params, data = trainingdmx, nrounds = 300, nfold = 5, showsd = T, stratified = T, print_every_n = 10, early_stop_rounds = 20, maximize = F) # best at 250 iterations
xgb_model1 <- xgb.train (params = params, data = trainingdmx, nrounds = 250, watchlist = list(val=testingdmx,train=trainingdmx), print_every_n = 10, early_stop_round = 10, maximize = F)
xgbpred <- predict(xgb_model1,testingdmx)
mat <- xgb.importance (feature_names = colnames(trainingmx),model = xgb_model1)
xgb.plot.importance (importance_matrix = mat)
# Loading latter to avoid the select clash with dplyr
library(MASS)
full_model <- lm(PH ~., data = train_df_imputed)
# Stepwise regression model
lm_model <- stepAIC(full_model, direction = "both", trace = FALSE)
summary(lm_model)
set.seed(seed)
tc <- trainControl(method = "cv", number = 10, allowParallel = TRUE)
lm_fit <- train(PH ~ ., data = train_df_imputed, method = "glmStepAIC", trControl = tc)
lm_fit
varImp(lm_fit)
lm_predictions <- predict(lm_fit, test_df_imputed)
postResample(pred = lm_predictions, obs = test_df_imputed$PH)
knitr::opts_chunk$set(echo = TRUE, comment = NA,
message = FALSE, warning = FALSE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(tidyr)
library(igraph)
setwd("~/Desktop/MSDS_spring2021/data_624")
install.packages("igraph")
knitr::opts_chunk$set(echo = TRUE, comment = NA,
message = FALSE, warning = FALSE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(tidyr)
library(igraph)
library(arules)
install.packages("arules")
knitr::opts_chunk$set(echo = TRUE, comment = NA,
message = FALSE, warning = FALSE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(tidyr)
library(igraph)
library(arules)
library(stats)
transactions <- read.transactions("GroceryDataSet.csv", sep=",")
itemFrequencyPlot(transactions, topN=10, type="absolute", main="Top 10 Items")
apriori(transactions, parameter=list(supp=0.001, conf=0.5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10) %>%
kable() %>%
kable_styling()
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "") %>%
select(-name)
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "")
louvain_communities <- temp %>%
rename(to = value, from = shoper_id) %>%
graph_from_data_frame(directed = FALSE) %>%
cluster_louvain() %>%
communities()
items <- as.character(unique(temp$value))
cluster_df <- data.frame(name = c(NA), members = c(NA)) %>% na.omit()
for (i in 1:length(louvain_communities)){
cluster_name <- paste0(i,": ")
cluster_members <- 0
for (member in louvain_communities[[i]]){
if (member %in% items){
cluster_name <- paste0(cluster_name, member, " + ")
} else {
cluster_members <- cluster_members + 1
}
}
cluster_name <- substr(cluster_name,1,nchar(cluster_name)-3)
cluster_df <- rbind(cluster_df, data.frame(name = cluster_name, members = cluster_members))
}
cluster_df %>%
arrange(desc(members)) %>%
kable() %>%
kable_styling()
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "") %>%
select(-name)
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "")
louvain_communities <- temp %>%
rename(to = value, from = shoper_id) %>%
graph_from_data_frame(directed = FALSE) %>%
cluster_louvain() %>%
communities()
items <- as.character(unique(temp$value))
cluster_df <- data.frame(name = c(NA), members = c(NA)) %>% na.omit()
for (i in 1:length(louvain_communities)){
cluster_name <- paste0(i,": ")
cluster_members <- 0
for (member in louvain_communities[[i]]){
if (member %in% items){
cluster_name <- paste0(cluster_name, member, " + ")
} else {
cluster_members <- cluster_members + 1
}
}
cluster_name <- substr(cluster_name,1,nchar(cluster_name)-3)
cluster_df <- rbind(cluster_df, data.frame(name = cluster_name, members = cluster_members))
}
cluster_df %>%
arrange(desc(members)) %>%
kable() %>%
kable_styling()
items <- as.character(unique(grocery_data$value))
grocery_data <- read.csv("GroceryDataSet.csv", header = FALSE) %>% mutate(shopper_id = row_number()) %>%
pivot_longer(-shopper_id) %>% filter(value != "") %>% select(-name)
knitr::opts_chunk$set(echo = TRUE, comment = NA,
message = FALSE, warning = FALSE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(tidyr)
library(igraph)
library(arules)
library(stats)
transactions <- read.transactions("GroceryDataSet.csv", sep=",")
itemFrequencyPlot(transactions, topN=10, type="absolute", main="Top 10 Items")
apriori(transactions, parameter=list(supp=0.001, conf=0.5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10) %>%
kable() %>%
kable_styling()
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "")
louvain_communities <- temp %>%
rename(to = value, from = shoper_id) %>%
graph_from_data_frame(directed = FALSE) %>%
cluster_louvain() %>%
communities()
items <- as.character(unique(temp$value))
cluster_df <- data.frame(name = c(NA), members = c(NA)) %>% na.omit()
for (i in 1:length(louvain_communities)){
cluster_name <- paste0(i,": ")
cluster_members <- 0
for (member in louvain_communities[[i]]){
if (member %in% items){
cluster_name <- paste0(cluster_name, member, " + ")
} else {
cluster_members <- cluster_members + 1
}
}
cluster_name <- substr(cluster_name,1,nchar(cluster_name)-3)
cluster_df <- rbind(cluster_df, data.frame(name = cluster_name, members = cluster_members))
}
cluster_df %>%
arrange(desc(members)) %>%
kable() %>%
kable_styling()
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "") %>%
select(-names)
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "") %>%
select(-name)
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "")
louvain_communities <- temp %>%
rename(to = value, from = shoper_id) %>%
graph_from_data_frame(directed = FALSE) %>%
cluster_louvain() %>%
communities()
items <- as.character(unique(temp$value))
cluster_df <- data.frame(name = c(NA), members = c(NA)) %>% na.omit()
for (i in 1:length(louvain_communities)){
cluster_name <- paste0(i,": ")
cluster_members <- 0
for (member in louvain_communities[[i]]){
if (member %in% items){
cluster_name <- paste0(cluster_name, member, " + ")
} else {
cluster_members <- cluster_members + 1
}
}
cluster_name <- substr(cluster_name,1,nchar(cluster_name)-3)
cluster_df <- rbind(cluster_df, data.frame(name = cluster_name, members = cluster_members))
}
cluster_df %>%
arrange(desc(members)) %>%
kable() %>%
kable_styling()
knitr::opts_chunk$set(echo = TRUE, comment = NA,
message = FALSE, warning = FALSE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(tidyr)
library(igraph)
library(arules)
library(stats)
transactions <- read.transactions("GroceryDataSet.csv", sep=",")
itemFrequencyPlot(transactions, topN=10, type="absolute", main="Top 10 Items")
apriori(transactions, parameter=list(supp=0.001, conf=0.5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10) %>%
kable() %>%
kable_styling()
temp <- read.csv("GroceryDataSet.csv", header = FALSE) %>%
mutate(shoper_id = row_number()) %>%
pivot_longer(-shoper_id) %>%
filter(value != "")
louvain_communities <- temp %>%
rename(to = value, from = shoper_id) %>%
graph_from_data_frame(directed = FALSE) %>%
cluster_louvain() %>%
communities()
items <- as.character(unique(temp$value))
cluster_df <- data.frame(name = c(NA), members = c(NA)) %>% na.omit()
for (i in 1:length(louvain_communities)){
cluster_name <- paste0(i,": ")
cluster_members <- 0
for (member in louvain_communities[[i]]){
if (member %in% items){
cluster_name <- paste0(cluster_name, member, " + ")
} else {
cluster_members <- cluster_members + 1
}
}
cluster_name <- substr(cluster_name,1,nchar(cluster_name)-3)
cluster_df <- rbind(cluster_df, data.frame(name = cluster_name, members = cluster_members))
}
cluster_df %>%
arrange(desc(members)) %>%
kable() %>%
kable_styling()
# Load the libraries
library(arules)
library(arulesViz)
install.packages("arulesViz")
# Load the libraries
library(arules)
library(arulesViz)
library(datasets)
library(tidyverse)
library(reshape2)
library(RColorBrewer)
options(digits=2)
set.seed(424242)
# Load Groceries Dataset
groceries_df <- read.csv("./GroceryDataSet.csv", header = FALSE,
na.strings="",
stringsAsFactors=FALSE )
# Add an id column
groceries_df$id <- seq(nrow(groceries_df))
# Trim any white space at the begining or end of product names
groceries_df <- groceries_df %>%
mutate(across(where(is.character), str_trim))
#cols_to_trim <- names(groceries_df)[vapply(groceries_df, is.character, logical(1))]
#groceries_df[,cols_to_trim] <- lapply(groceries_df[,cols_to_trim], trimws)
# How many baskets and max products?
print(paste(nrow(groceries_df), ncol(groceries_df)))
# Since the data.frame has empty cells, we need to clean those out
groceries_long <- melt(groceries_df, id.vars="id")
groceries_trans <- as(lapply(split(groceries_long$value, groceries_long$id), unique), "transactions")
# View first few baskets to make sure things look good
inspect(groceries_trans[1:5])
# Plot product frequency for top items
itemFrequencyPlot(groceries_trans,
topN=30,
type="absolute",
col=brewer.pal(8,'Pastel2'),
main='Absolute Item Frequency Plot',
ylab="Item Frequency (Absolute)")
# iFreq <- itemFrequency(groceries_trans, type="relative")
rules <- apriori(groceries_trans,
parameter = list(supp = 0.001,
conf = 0.15,
minlen = 2,
maxlen = 5))
# find redundant rules
# subset.matrix <- is.subset(rules, rules)
# subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
# redundant <- colSums(subset.matrix, na.rm=T) >= 1
# remove redundant rules
# rules.pruned <- rules[!redundant]
# rules <- rules.pruned
rules <- sort(rules, by="lift", decreasing=TRUE)
inspect(rules[1:10])
# Sort rules by Confidence
plot(rules[1:20],
method="graph",
engine='default',
control = list(type='items'))
plot(rules[1:20],
method = "paracoord",
control = list(reorder = TRUE))
s <- groceries_trans[,itemFrequency(groceries_trans) > 0.02]
d_jaccard <- dissimilarity(s, which = "items", method="affinity")
plot(hclust(d_jaccard, method = "ward.D2"), main = "Dendrogram for Items")
d_affinity <- dissimilarity(rules[1:20],
method = "affinity",
args = list(transactions = groceries_trans))
hc <- hclust(d_affinity, method = "ward.D2")
plot(hc, main = "Dendrogram for Rules (Affinity)")
## create 4 groups and inspect the rules in the first group.
assign <- cutree(hc, k = 3)
inspect(rules[assign == 1])
transactions <- read.transactions("GroceryDataSet.csv", sep=",")
itemFrequencyPlot(transactions, topN=10, type="absolute", main="Top 10 Items")
rules <- apriori(transactions, parameter=list(supp=0.001, conf=0.5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10) %>%
kable() %>%
kable_styling()
rules <- apriori(transactions, parameter=list(supp=0.001, conf=0.15, minlen=2, maxlen=5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10) %>%
kable() %>%
kable_styling()
rules <- apriori(transactions, parameter=list(supp=0.001, conf=0.15, minlen=2, maxlen=5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10) %>%
kable() %>%
kable_styling()
rules <- sort(rules, by="lift", decreasing=TRUE)
inspect(rules[1:10])
rules <- apriori(transactions, parameter=list(supp=0.001, conf=0.15, minlen=2, maxlen=5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10) %>%
kable() %>%
kable_styling()
rules <- sort(rules, by="lift", decreasing=TRUE)
rules
rules <- apriori(transactions, parameter=list(supp=0.001, conf=0.15, minlen=2, maxlen=5) , control=list(verbose=FALSE)) %>%
DATAFRAME() %>%
arrange(desc(lift)) %>%
top_n(10)
rules <- sort(rules, by="lift", decreasing=TRUE)
rules <- apriori(transactions, parameter=list(supp=0.001, conf=0.15, minlen=2, maxlen=5) , control=list(verbose=FALSE))
rules <- sort(rules, by="lift", decreasing=TRUE)
rules
d_affinity <- dissimilarity(rules[1:20],
method = "affinity",
args = list(transactions = groceries_trans))
hc <- hclust(d_affinity, method = "ward.D2")
plot(hc, main = "Dendrogram for Rules (Affinity)")
## create 4 groups and inspect the rules in the first group.
assign <- cutree(hc, k = 3)
rules[assign == 1]
d_affinity <- dissimilarity(rules[1:20],
method = "affinity",
args = list(transactions = groceries_trans))
hc <- hclust(d_affinity, method = "ward.D2")
plot(hc, main = "Dendrogram for Rules (Affinity)")
## create 4 groups and inspect the rules in the first group.
assign <- cutree(hc, k = 3)
rules[assign == 1]
inspect(rules)
inspect(rules[assign == 4])
inspect(rules[assign == 4])
inspect(rules[assign == 2])
d_affinity <- dissimilarity(rules[1:20],
method = "affinity",
args = list(transactions = groceries_trans))
hc <- hclust(d_affinity, method = "ward.D2")
plot(hc, main = "Dendrogram for Rules (Affinity)")
## create 4 groups and inspect the rules in the first group.
assign <- cutree(hc, k = 3)
rules
# Load Groceries Dataset
groceries_df <- read.csv("GroceryDataSet.csv", header = FALSE,
na.strings="",
stringsAsFactors=FALSE )
# Add an id column
groceries_df$id <- seq(nrow(groceries_df))
groceries_df <- groceries_df %>%
mutate(across(where(is.character), str_trim))
print(paste(nrow(groceries_df), ncol(groceries_df)))
groceries_long <- melt(groceries_df, id.vars="id")
groceries_trans <- as(lapply(split(groceries_long$value, groceries_long$id), unique), "transactions")
inspect(groceries_trans[1:5])
itemFrequencyPlot(groceries_trans,
topN=30,
type="absolute",
col=brewer.pal(8,'blue'),
main='Absolute Item Frequency Plot',
ylab="Item Frequency (Absolute)")
# Load Groceries Dataset
groceries_df <- read.csv("GroceryDataSet.csv", header = FALSE,
na.strings="",
stringsAsFactors=FALSE )
# Add an id column
groceries_df$id <- seq(nrow(groceries_df))
groceries_df <- groceries_df %>%
mutate(across(where(is.character), str_trim))
print(paste(nrow(groceries_df), ncol(groceries_df)))
groceries_long <- melt(groceries_df, id.vars="id")
groceries_trans <- as(lapply(split(groceries_long$value, groceries_long$id), unique), "transactions")
inspect(groceries_trans[1:5])
itemFrequencyPlot(groceries_trans,
topN=30,
type="absolute",
col=brewer.pal(8,'blues'),
main='Absolute Item Frequency Plot',
ylab="Item Frequency (Absolute)")
# Load Groceries Dataset
groceries_df <- read.csv("GroceryDataSet.csv", header = FALSE,
na.strings="",
stringsAsFactors=FALSE )
# Add an id column
groceries_df$id <- seq(nrow(groceries_df))
groceries_df <- groceries_df %>%
mutate(across(where(is.character), str_trim))
print(paste(nrow(groceries_df), ncol(groceries_df)))
groceries_long <- melt(groceries_df, id.vars="id")
groceries_trans <- as(lapply(split(groceries_long$value, groceries_long$id), unique), "transactions")
inspect(groceries_trans[1:5])
itemFrequencyPlot(groceries_trans,
topN=30,
type="absolute",
col=brewer.pal(8,'Pastel3'),
main='Absolute Item Frequency Plot',
ylab="Item Frequency (Absolute)")
# Load Groceries Dataset
groceries_df <- read.csv("GroceryDataSet.csv", header = FALSE,
na.strings="",
stringsAsFactors=FALSE )
# Add an id column
groceries_df$id <- seq(nrow(groceries_df))
groceries_df <- groceries_df %>%
mutate(across(where(is.character), str_trim))
print(paste(nrow(groceries_df), ncol(groceries_df)))
groceries_long <- melt(groceries_df, id.vars="id")
groceries_trans <- as(lapply(split(groceries_long$value, groceries_long$id), unique), "transactions")
inspect(groceries_trans[1:5])
itemFrequencyPlot(groceries_trans,
topN=30,
type="absolute",
col=brewer.pal(8,'Pastel1'),
main='Absolute Item Frequency Plot',
ylab="Item Frequency (Absolute)")
# Load Groceries Dataset
groceries_df <- read.csv("GroceryDataSet.csv", header = FALSE,
na.strings="",
stringsAsFactors=FALSE )
# Add an id column
groceries_df$id <- seq(nrow(groceries_df))
groceries_df <- groceries_df %>%
mutate(across(where(is.character), str_trim))
print(paste(nrow(groceries_df), ncol(groceries_df)))
groceries_long <- melt(groceries_df, id.vars="id")
groceries_trans <- as(lapply(split(groceries_long$value, groceries_long$id), unique), "transactions")
inspect(groceries_trans[1:5])
itemFrequencyPlot(groceries_trans,
topN=30,
type="absolute",
main='Absolute Item Frequency Plot',
ylab="Item Frequency (Absolute)")
# Load Groceries Dataset
groceries_df <- read.csv("GroceryDataSet.csv", header = FALSE,
na.strings="",
stringsAsFactors=FALSE )
# Add an id column
groceries_df$id <- seq(nrow(groceries_df))
groceries_df <- groceries_df %>%
mutate(across(where(is.character), str_trim))
print(paste(nrow(groceries_df), ncol(groceries_df)))
groceries_long <- melt(groceries_df, id.vars="id")
groceries_trans <- as(lapply(split(groceries_long$value, groceries_long$id), unique), "transactions")
inspect(groceries_trans[1:5])
itemFrequencyPlot(groceries_trans,
topN=30,
type="absolute",
main='Absolute Item Frequency Plot',
ylab="Item Frequency (Absolute)")
inspect(rules[assign == 2][1:10])
